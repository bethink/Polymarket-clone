import Head from "next/head";
import React, { useCallback, useEffect, useState } from "react";
import Web3 from "web3";
import Navbar from "../components/Navbar";
import { PortfolioMarketCard } from "../components/PortfolioMarketCard";
import { useData } from "../contexts/DataContext";
import styles from "../styles/Home.module.css";
import {
  BoxLoader,
  common_file,
  MarketDetailLoader,
  MarketLoader,
  MarketPositonCardLoader,
  MarketPositonCardLoaderStat,
  PortfolioPageLoader,
  TitleLoader
} from "../constant/constant";
import { MarketCard } from "../components/MarketCard";

export interface MarketProps {
  id: string;
  title?: string;
  imageHash?: string;
  totalAmount?: string;
  totalYes?: string;
  totalNo?: string;
  userYes?: string;
  hasResolved?: boolean;
  userNo?: string;
  timestamp?: string;
  endTimestamp?: string;
}

export interface QuestionsProps {
  id: string;
  title?: string;
  imageHash?: string;
  totalAmount?: string;
  totalYes?: string;
  totalNo?: string;
  hasResolved?: boolean;
  endTimestamp?: string;
}

const Portfolio = () => {
  const { polymarket, account, loadWeb3, loading } = useData();
  const [markets, setMarkets] = useState<MarketProps[]>([]);
  const [portfolioValue, setPortfolioValue] = useState<number>(0);
  const [allQuestions, setAllQuestions] = useState<QuestionsProps[]>([]);
  const [openPositions, setOpenPositions] = useState<number>(0);
  const [dataLoading, setDataLoading] = useState<Boolean>(true);
  const loaders = Array(9).fill(0);

  const getMarkets = useCallback(async () => {
    var totalQuestions = await polymarket.methods
      .totalQuestions()
      .call({ from: account });
    for (var i = 0; i < totalQuestions; i++) {
      var questions = await polymarket.methods
        .questions(i)
        .call({ from: account });
      allQuestions.push({
        id: questions.id,
        title: questions.question,
        imageHash: questions.creatorImageHash,
        totalAmount: questions.totalAmount,
        totalYes: questions.totalYesAmount,
        totalNo: questions.totalNoAmount,
        hasResolved: questions.eventCompleted,
        endTimestamp: questions.endTimestamp
      });
    }

    var dataArray: MarketProps[] = [];
    var totalPortValue = 0;
    for (var i = 0; i < totalQuestions; i++) {
      var data = await polymarket.methods
        .getGraphData(i)
        .call({ from: account });
      data["0"].forEach((item: any) => {
        if (item[0] == account) {
          dataArray.push({
            id: i.toString(),
            userYes: item[1].toString(),
            timestamp: item[2].toString()
          });
          totalPortValue += parseInt(item[1]);
        }
      });
      data["1"].forEach((item: any) => {
        if (item[0] == account) {
          dataArray.push({
            id: i.toString(),
            userNo: item[1].toString(),
            timestamp: item[2].toString()
          });
          totalPortValue += parseInt(item[1]);
        }
      });
    }
    setPortfolioValue(totalPortValue);
    for (var i = 0; i < dataArray.length; i++) {
      var question = allQuestions.find((item) => item.id == dataArray[i].id);
      dataArray[i].title = question!.title;
      dataArray[i].imageHash = question!.imageHash;
      dataArray[i].totalAmount = question!.totalAmount;
      dataArray[i].totalYes = question!.totalYes;
      dataArray[i].totalNo = question!.totalNo!;
      dataArray[i].hasResolved = question!.hasResolved;
      dataArray[i].endTimestamp = question!.endTimestamp;
    }
    setMarkets(dataArray);
    setDataLoading(false);
  }, [account, polymarket]);

  useEffect(() => {
    loadWeb3().then(() => {
      if (!loading) {
        getMarkets();
      }
    });
  }, [loading]);

  return (
    <div className={styles.container}>
      <Head>
        <title>{common_file.prediction_market.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/prediction_market_logo.png" />
      </Head>
      <Navbar />
      {dataLoading ? (
        <main className="w-full flex flex-col gap-6 max-w-full px-4 sm:px-6 lg:px-8 pt-6">
          <BoxLoader />
          <TitleLoader />
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {loaders.map((_, index) => (
              <div
                className="flex flex-col border border-gray-200 rounded-lg p-5"
                key={index}
              >
                <MarketPositonCardLoader />
              </div>
            ))}
          </div>
        </main>
      ) : (
        <main className="w-full flex flex-col max-w-full px-4 sm:px-6 lg:px-8">
          <div className="w-full flex flex-col pt-6 gap-4">
            <div className="p-10 bg-blue-500 rounded-lg flex flex-row justify-evenly">
              <div className="flex flex-col items-center">
                <h1 className="text-blue-50 opacity-50 text-lg">
                  Portfolio Value
                </h1>
                <h1 className="text-blue-50 text-4xl font-bold">
                  {Web3.utils.fromWei(portfolioValue.toString())}{" "}
                  {common_file.token_name.value}
                </h1>
              </div>
            </div>

            <div className="section-title">
              <h6 className="font-bold text-lg text-black">
                {" "}
                Your Market Positions
              </h6>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {markets.map((market) => (
                <PortfolioMarketCard
                  id={market.id}
                  title={market.title!}
                  imageHash={market.imageHash!}
                  totalAmount={market.totalAmount!}
                  totalYes={market.totalYes!}
                  totalNo={market.totalNo!}
                  userYes={market.userYes!}
                  userNo={market.userNo!}
                  key={market.id!}
                  hasResolved={market.hasResolved!}
                  timestamp={market.timestamp!}
                  endTimestamp={market.endTimestamp!}
                />
              ))}
            </div>
          </div>
        </main>
      )}
    </div>
  );
};

export default Portfolio;
